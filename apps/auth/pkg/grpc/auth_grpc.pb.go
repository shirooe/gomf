// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: libs/api/auth/auth.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthUnprotectedClient is the client API for AuthUnprotected service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthUnprotectedClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type authUnprotectedClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthUnprotectedClient(cc grpc.ClientConnInterface) AuthUnprotectedClient {
	return &authUnprotectedClient{cc}
}

func (c *authUnprotectedClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthUnprotected/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUnprotectedClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthUnprotected/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthUnprotectedServer is the server API for AuthUnprotected service.
// All implementations must embed UnimplementedAuthUnprotectedServer
// for forward compatibility
type AuthUnprotectedServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	mustEmbedUnimplementedAuthUnprotectedServer()
}

// UnimplementedAuthUnprotectedServer must be embedded to have forward compatible implementations.
type UnimplementedAuthUnprotectedServer struct {
}

func (UnimplementedAuthUnprotectedServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthUnprotectedServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthUnprotectedServer) mustEmbedUnimplementedAuthUnprotectedServer() {}

// UnsafeAuthUnprotectedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthUnprotectedServer will
// result in compilation errors.
type UnsafeAuthUnprotectedServer interface {
	mustEmbedUnimplementedAuthUnprotectedServer()
}

func RegisterAuthUnprotectedServer(s grpc.ServiceRegistrar, srv AuthUnprotectedServer) {
	s.RegisterService(&AuthUnprotected_ServiceDesc, srv)
}

func _AuthUnprotected_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUnprotectedServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthUnprotected/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUnprotectedServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUnprotected_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUnprotectedServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthUnprotected/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUnprotectedServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthUnprotected_ServiceDesc is the grpc.ServiceDesc for AuthUnprotected service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthUnprotected_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthUnprotected",
	HandlerType: (*AuthUnprotectedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthUnprotected_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AuthUnprotected_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "libs/api/auth/auth.proto",
}

// AuthProtectedClient is the client API for AuthProtected service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthProtectedClient interface {
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AccessToken(ctx context.Context, in *AccessTokenRequest, opts ...grpc.CallOption) (*AccessTokenResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
}

type authProtectedClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthProtectedClient(cc grpc.ClientConnInterface) AuthProtectedClient {
	return &authProtectedClient{cc}
}

func (c *authProtectedClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthProtected/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProtectedClient) AccessToken(ctx context.Context, in *AccessTokenRequest, opts ...grpc.CallOption) (*AccessTokenResponse, error) {
	out := new(AccessTokenResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthProtected/AccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProtectedClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthProtected/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthProtectedServer is the server API for AuthProtected service.
// All implementations must embed UnimplementedAuthProtectedServer
// for forward compatibility
type AuthProtectedServer interface {
	Logout(context.Context, *LogoutRequest) (*emptypb.Empty, error)
	AccessToken(context.Context, *AccessTokenRequest) (*AccessTokenResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	mustEmbedUnimplementedAuthProtectedServer()
}

// UnimplementedAuthProtectedServer must be embedded to have forward compatible implementations.
type UnimplementedAuthProtectedServer struct {
}

func (UnimplementedAuthProtectedServer) Logout(context.Context, *LogoutRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthProtectedServer) AccessToken(context.Context, *AccessTokenRequest) (*AccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessToken not implemented")
}
func (UnimplementedAuthProtectedServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthProtectedServer) mustEmbedUnimplementedAuthProtectedServer() {}

// UnsafeAuthProtectedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthProtectedServer will
// result in compilation errors.
type UnsafeAuthProtectedServer interface {
	mustEmbedUnimplementedAuthProtectedServer()
}

func RegisterAuthProtectedServer(s grpc.ServiceRegistrar, srv AuthProtectedServer) {
	s.RegisterService(&AuthProtected_ServiceDesc, srv)
}

func _AuthProtected_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProtectedServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthProtected/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProtectedServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProtected_AccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProtectedServer).AccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthProtected/AccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProtectedServer).AccessToken(ctx, req.(*AccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProtected_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProtectedServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthProtected/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProtectedServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthProtected_ServiceDesc is the grpc.ServiceDesc for AuthProtected service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthProtected_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthProtected",
	HandlerType: (*AuthProtectedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Logout",
			Handler:    _AuthProtected_Logout_Handler,
		},
		{
			MethodName: "AccessToken",
			Handler:    _AuthProtected_AccessToken_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _AuthProtected_RefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "libs/api/auth/auth.proto",
}
